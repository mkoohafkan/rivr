// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// froude
double froude(double Q, double g, double A, double DH);
RcppExport SEXP _rivr_froude(SEXP QSEXP, SEXP gSEXP, SEXP ASEXP, SEXP DHSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type DH(DHSEXP);
    rcpp_result_gen = Rcpp::wrap(froude(Q, g, A, DH));
    return rcpp_result_gen;
END_RCPP
}
// channel_geom
NumericVector channel_geom(double y, double B, double SS);
RcppExport SEXP _rivr_channel_geom(SEXP ySEXP, SEXP BSEXP, SEXP SSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type SS(SSSEXP);
    rcpp_result_gen = Rcpp::wrap(channel_geom(y, B, SS));
    return rcpp_result_gen;
END_RCPP
}
// conveyance
double conveyance(double n, double A, double R, double Cm);
RcppExport SEXP _rivr_conveyance(SEXP nSEXP, SEXP ASEXP, SEXP RSEXP, SEXP CmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type Cm(CmSEXP);
    rcpp_result_gen = Rcpp::wrap(conveyance(n, A, R, Cm));
    return rcpp_result_gen;
END_RCPP
}
// normal_depth
double normal_depth(double So, double n, double Q, double yopt, double Cm, double B, double SS);
RcppExport SEXP _rivr_normal_depth(SEXP SoSEXP, SEXP nSEXP, SEXP QSEXP, SEXP yoptSEXP, SEXP CmSEXP, SEXP BSEXP, SEXP SSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type So(SoSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type yopt(yoptSEXP);
    Rcpp::traits::input_parameter< double >::type Cm(CmSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type SS(SSSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_depth(So, n, Q, yopt, Cm, B, SS));
    return rcpp_result_gen;
END_RCPP
}
// critical_depth
double critical_depth(double Q, double yopt, double g, double B, double SS);
RcppExport SEXP _rivr_critical_depth(SEXP QSEXP, SEXP yoptSEXP, SEXP gSEXP, SEXP BSEXP, SEXP SSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type yopt(yoptSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type SS(SSSEXP);
    rcpp_result_gen = Rcpp::wrap(critical_depth(Q, yopt, g, B, SS));
    return rcpp_result_gen;
END_RCPP
}
// loop_step
NumericMatrix loop_step(double So, double n, double Q, double Cm, double g, double y, double B, double SS, double z, double x, double stepdist, double totaldist);
RcppExport SEXP _rivr_loop_step(SEXP SoSEXP, SEXP nSEXP, SEXP QSEXP, SEXP CmSEXP, SEXP gSEXP, SEXP ySEXP, SEXP BSEXP, SEXP SSSEXP, SEXP zSEXP, SEXP xSEXP, SEXP stepdistSEXP, SEXP totaldistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type So(SoSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type Cm(CmSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type stepdist(stepdistSEXP);
    Rcpp::traits::input_parameter< double >::type totaldist(totaldistSEXP);
    rcpp_result_gen = Rcpp::wrap(loop_step(So, n, Q, Cm, g, y, B, SS, z, x, stepdist, totaldist));
    return rcpp_result_gen;
END_RCPP
}
// kinematic_wave
List kinematic_wave(double So, double n, double Cm, double g, double B, double SS, int numnodes, NumericVector bc, double ic, double timestep, double spacestep, IntegerVector mpidx, IntegerVector mtidx);
RcppExport SEXP _rivr_kinematic_wave(SEXP SoSEXP, SEXP nSEXP, SEXP CmSEXP, SEXP gSEXP, SEXP BSEXP, SEXP SSSEXP, SEXP numnodesSEXP, SEXP bcSEXP, SEXP icSEXP, SEXP timestepSEXP, SEXP spacestepSEXP, SEXP mpidxSEXP, SEXP mtidxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type So(SoSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type Cm(CmSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< int >::type numnodes(numnodesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bc(bcSEXP);
    Rcpp::traits::input_parameter< double >::type ic(icSEXP);
    Rcpp::traits::input_parameter< double >::type timestep(timestepSEXP);
    Rcpp::traits::input_parameter< double >::type spacestep(spacestepSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mpidx(mpidxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mtidx(mtidxSEXP);
    rcpp_result_gen = Rcpp::wrap(kinematic_wave(So, n, Cm, g, B, SS, numnodes, bc, ic, timestep, spacestep, mpidx, mtidx));
    return rcpp_result_gen;
END_RCPP
}
// characteristic_wave
List characteristic_wave(double So, double n, double Cm, double g, double B, double SS, int numnodes, NumericVector bc, NumericVector dc, double ic, double timestep, double spacestep, IntegerVector mpidx, IntegerVector mtidx, std::string btype);
RcppExport SEXP _rivr_characteristic_wave(SEXP SoSEXP, SEXP nSEXP, SEXP CmSEXP, SEXP gSEXP, SEXP BSEXP, SEXP SSSEXP, SEXP numnodesSEXP, SEXP bcSEXP, SEXP dcSEXP, SEXP icSEXP, SEXP timestepSEXP, SEXP spacestepSEXP, SEXP mpidxSEXP, SEXP mtidxSEXP, SEXP btypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type So(SoSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type Cm(CmSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< int >::type numnodes(numnodesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bc(bcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dc(dcSEXP);
    Rcpp::traits::input_parameter< double >::type ic(icSEXP);
    Rcpp::traits::input_parameter< double >::type timestep(timestepSEXP);
    Rcpp::traits::input_parameter< double >::type spacestep(spacestepSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mpidx(mpidxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mtidx(mtidxSEXP);
    Rcpp::traits::input_parameter< std::string >::type btype(btypeSEXP);
    rcpp_result_gen = Rcpp::wrap(characteristic_wave(So, n, Cm, g, B, SS, numnodes, bc, dc, ic, timestep, spacestep, mpidx, mtidx, btype));
    return rcpp_result_gen;
END_RCPP
}
// diffusive_wave
List diffusive_wave(double So, double n, double Cm, double g, double B, double SS, int numnodes, NumericVector bc, NumericVector dc, double ic, double timestep, double spacestep, IntegerVector mpidx, IntegerVector mtidx, std::string btype);
RcppExport SEXP _rivr_diffusive_wave(SEXP SoSEXP, SEXP nSEXP, SEXP CmSEXP, SEXP gSEXP, SEXP BSEXP, SEXP SSSEXP, SEXP numnodesSEXP, SEXP bcSEXP, SEXP dcSEXP, SEXP icSEXP, SEXP timestepSEXP, SEXP spacestepSEXP, SEXP mpidxSEXP, SEXP mtidxSEXP, SEXP btypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type So(SoSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type Cm(CmSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< int >::type numnodes(numnodesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bc(bcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dc(dcSEXP);
    Rcpp::traits::input_parameter< double >::type ic(icSEXP);
    Rcpp::traits::input_parameter< double >::type timestep(timestepSEXP);
    Rcpp::traits::input_parameter< double >::type spacestep(spacestepSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mpidx(mpidxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mtidx(mtidxSEXP);
    Rcpp::traits::input_parameter< std::string >::type btype(btypeSEXP);
    rcpp_result_gen = Rcpp::wrap(diffusive_wave(So, n, Cm, g, B, SS, numnodes, bc, dc, ic, timestep, spacestep, mpidx, mtidx, btype));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rivr_froude", (DL_FUNC) &_rivr_froude, 4},
    {"_rivr_channel_geom", (DL_FUNC) &_rivr_channel_geom, 3},
    {"_rivr_conveyance", (DL_FUNC) &_rivr_conveyance, 4},
    {"_rivr_normal_depth", (DL_FUNC) &_rivr_normal_depth, 7},
    {"_rivr_critical_depth", (DL_FUNC) &_rivr_critical_depth, 5},
    {"_rivr_loop_step", (DL_FUNC) &_rivr_loop_step, 12},
    {"_rivr_kinematic_wave", (DL_FUNC) &_rivr_kinematic_wave, 13},
    {"_rivr_characteristic_wave", (DL_FUNC) &_rivr_characteristic_wave, 15},
    {"_rivr_diffusive_wave", (DL_FUNC) &_rivr_diffusive_wave, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_rivr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
